import {
  z,
  object as zobject,
  string as zstring,
  number as znumber,
  boolean as zboolean,
  array as zarray,
  unknown as zunknown,
  lazy as zlazy,
  nullable as znullable,
  optional as zoptional,
} from 'zod';

const ContactSchema = zobject({
  _id: zstring(),
  contact_id: znumber(),
  display_name: zstring(),
  primary_email: zstring().email(),
  update_date: zstring().datetime(),
  update_id: znumber(),
  create_date: zstring().datetime(),
  create_id: znumber(),
  owner_id: znumber(),
  profile_image: zstring(),
  archive: zboolean(),
  emails: zarray(zobject({
    order: znumber(),
    usage: zstring(),
    address: zstring().email(),
  })),
  phones: zarray(zobject({
    order: znumber(),
    usage: zstring(),
    format: zstring(),
    number: zstring(),
  })),
  addresses: zarray(zobject({
    order: znumber(),
    usage: zstring(),
    street1: zstring(),
    street2: zoptional(zstring()),
    street3: zoptional(zstring()),
    region1: zstring(),
    region2: zstring(),
    postalcode: zstring(),
    country: zstring(),
    valid_from: zoptional(zstring()),
    valid_to: zoptional(zstring()),
  })),
  org_name: zoptional(zstring()),
  title: zoptional(zstring()),
  first_name: zstring(),
  last_name: zstring(),
  tags: zoptional(zarray(zstring())),
  socialLinks: zoptional(zarray(zstring())),
  primary_phone: zoptional(zstring()),
  locale: zstring(),
  salutation: zoptional(zstring()),
  middle_name: zoptional(zstring()),
  name_suffix: zoptional(zstring()),
  nick_name: zoptional(zstring()),
  job_title: zoptional(zstring()),
  notes: zoptional(zstring()),
  owned_by: zlazy(() => ContactSchema),
  created_by: zlazy(() => ContactSchema),
  changed_by: zlazy(() => ContactSchema),
});

const PortalSetupSchema = zobject({
  branding_image_id: zstring(),
  custom_primary_color: zstring(),
  custom_link: zobject({
    link: zstring().url(),
    title: zstring(),
  }),
  palette: z.null(),
  clear_branding: zboolean(),
  tab_layouts: zarray(zunknown()),
  tracking_group_ids: zarray(zunknown()),
  email_address: zoptional(zstring()),
  brand_name: zoptional(zstring()),
  domain_name: zoptional(zstring()),
  custom_text_color: znullable(zstring()),
  _temp_handle_id: zstring(),
  content_type: zstring(),
  file_id: zstring(),
});

const SetupSigoptsSchema = zobject({
  allowed: zobject({
    text: zboolean(),
    image: zboolean(),
    pen: zboolean(),
  }),
});

const AccountSchema = zobject({
  _id: zstring(),
  account_name: zstring(),
  mail_account: zstring(),
  site_profile: zstring(),
  verify_mail: zobject({
    status: zstring(),
  }),
  integrations: zarray(zstring()),
  license_id: zstring(),
  type: zstring(),
  status: zstring(),
  status_date: zstring().datetime(),
  settings: zobject({
    licensed_accounts: zstring(),
    enhanced_users: zstring(),
    create_content: zboolean(),
    share_library: zboolean(),
    form_builder: zboolean(),
    api_access: zboolean(),
    custom_email_domain: zboolean(),
    enable_dashboard: zboolean(),
    configure_dashboard: zboolean(),
    is_admin: zboolean(),
    is_developer: zboolean(),
    is_billing_admin: zboolean(),
  }),
  create_id: znumber(),
  create_date: zstring().datetime(),
  security_policies: zarray(zunknown()),
  config: zobject({
    tab_definitions: zarray(zobject({
      id: zstring(),
      account_id: znullable(zstring()),
      name: zstring(),
      item_type: zstring(),
      icon: zstring(),
      primary_filter: zstring(),
      primary_filter_definition_id: znullable(zstring()),
      is_default: zboolean(),
      tab_layout: zarray(zunknown()),
      order: znumber(),
      show_layout_titles: zboolean(),
      filters: zarray(zunknown()),
      show_progressbar: zboolean(),
      search_query: zarray(zunknown()),
      search_preferences: zarray(zobject({
        title: zstring(),
        id: zstring(),
        nested: zboolean(),
        default: zoptional(zboolean()),
      })),
    })),
  }),
});

const UserInfoSchema = zobject({
  contact: ContactSchema,
  portal_setup: PortalSetupSchema,
  setup_sigopts: SetupSigoptsSchema,
  account: AccountSchema,
});

type UserInfo = z.infer<typeof UserInfoSchema>;

export { UserInfo, UserInfoSchema };
